Continuous Inverse Optimal Control with Locally Optimal Examples

Sergey Levine, 2012

1. Introduction
2. Installation
3. Usage
    3.1 Running a sample test
    3.2 Running experiments described in the paper
    3.3 Running highway domain learning
    3.4 Generating highway videos
    3.5 Generating examples with the highway simulator
4. Directory overview
5. License

1. Introduction

This MATLAB package contains the implementation of the algorithm described
in the paper "Continuous Inverse Optimal Control with Locally Optimal
Examples", Levine and Koltun, ICML 2012. This file describes the contents
of the package, and provides instruction regarding its use.

2. Installation

The code was written for MATLAB R2010b. Earlier version may be sufficient,
but were not tested.

IMPORTANT: If using MATLAB R2011a or later, delete the directory R2010b -
it simply contains a workaround for the missing "rng" function R2010b.

In addition to MATLAB R2009b and various toolboxes, which may include
the Statistics and Parallelism toolboxes, the package requires the
following external MATLAB scripts:

- minFunc, by Mark Schmidt, included with this package (Creative Commons by-nc,
    see <http://www.cs.ubc.ca/~schmidtm/Software/minFunc.html> for details)
- plot2svg, by Juerg Schwizer, included with this package (FreeBSD)

No installation procedure is required - simply unzip all files into the
desired directory. Run "addpath" before calling any other functions.

3. Usage

Most sessions will begin by running "addpaths" in the main directory, to
add all necessary subdirectories to the path. Optionally, you may save
your MATLAB path to avoid needing to do this, but this is left up to you,
since some users may prefer not to clutter up their path.

3.1 Running a single test

An example script for running a test is provided under the name singletest.m in
the main directory. This script calls "addpaths" to add the necessary paths, and
then runs a single test using the linear variant of the algorithm on a 2D
navigation task. Examining singletest.m should make the calling convention
for launching further test clear.

3.2 Running experiments described in the paper

The code to run the experiments described in the paper is contained in the
ICML2012 directory. Call alltestswrite(0,0,0,'') to generate a set of .m
files for each test case. In our experiments, these experiments were all
evaluated in parallel on a cluster. By examining the individual experiments,
it should be straightforward to deduce the calling convention for each test.

3.3 Running highway domain learning

The function highwayrun launches the learning algorithm on the human generated
examples in the highway domain. The examples are stored in the Results directory,
called data[type]128.mat. The results of the highway learning are also included
(since running the algorithm on the highway domain will usually take a very
long time), and are titled car[type]128.mat. Due to the way the tests are
evaluated, the locally optimal trajectories for the learned reward are
currently initialized to the provided examples. This is unacceptable in the
highway domain, because the corresponding human demonstrations are supposed
to be unobserved. Therefore, a script called "hwreopt" is provided to
re-generate the trajectories for the learned reward without using the
unobserved holdout trajectories. Note that this script can also take a very
long time to run, because the current trajectory optimization implementation
does not use fast modern algorithm (like DDP), instead opting for LBFGS
with gradients of the objective computed naively. This works fine on smaller
examples, but can be very time consuming on the highway example.

3.4 Generating highway videos

The videos for the highway policies can be generated by running highwayeval.
This script assumes that the results of the highway tests are stored in
Results/car[type]128.mat

3.5 Generating examples with the highway simulator

To generate your own driving examples on the highway domain, run highwayinput:

load Results/data128
seed = 0; % This seed determines your starting location
ex = highwayinput(test_result.mdp_data,test_result.mdp_params,seed,0);

Note that without a 3D mouse and the 3dmouse package (which can be obtained
from MathWorks but only works on Windows), you will be limited to a "turn
based" mouse control of the car. The w and s keys can be used to rewind
or step forward. In the end, ex will contain the example you generated. To
see how these examples are used, highwayrun.m line 11.

4. Directory overview

Auglag - augmented Lagrangian implementation for handling the constrained
         optimization required by the regularization theta_r

Dummy - placeholder dummy algorithm that performs no actual learning and
        returns a random reward

FastHess - implementation of the direct Hessian inversion algorithm

General - general utility files, runtest, etc.

GPIRL - approximate learning with a Gaussian process representation

Highway - the highway domain

ICML2012 - paper-specific test evaluation scripts

Laplace - approximate learning with linear reward representation

LQR - approximate learning with linear rewards and LQR-based objective evaluation

MaxEnt - implementation of MaxEnt with grid discretization

Objectworld - 2D navigation task

OptV - implementation of OptV with grid discretization of action space

R2010b - workaround for missing "rng" function

Results - data directory

Reward - reward and reward features

Robotarm - the robot arm domain

Utilities - 3rd party libraries

5. License

The license included below governs the terms of use for this software. Please
direct any correspondence regarding the software to svlevine@cs.stanford.edu.
The IRL toolkit is created by Sergey Levine, copyright 2012. If you are using
the software in an academic publication, you may cite it as the ICML 2012
paper: Levine, Koltun. Continuous Inverse Optimal Control with Locally
Optimal Examples. ICML 2012.

Copyright (c) 2012, Sergey Levine
All rights reserved.

This software is made available under the Creative Commons 
Attribution-Noncommercial License, viewable at
http://creativecommons.org/licenses/by-nc/3.0/. You are free to use, copy,
modify, and re-distribute the work.  However, you must attribute any
re-distribution or adaptation in the manner specified below, and you may not
use this work for commercial purposes without the permission of the author.

Any re-distribution or adaptation of this work must contain the author's name 
(Sergey Levine) and a link to the software's original webpage.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" 
AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE 
IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE 
ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE 
LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR 
CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF 
SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS 
INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN 
CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) 
ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE 
POSSIBILITY OF SUCH DAMAGE.
